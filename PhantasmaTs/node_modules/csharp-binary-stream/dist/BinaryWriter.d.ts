import { Encoding } from "./Encoding";
/**
 * A binary stream writer compatible with majority of methods in C#'s [BinaryWriter](https://docs.microsoft.com/en-us/dotnet/api/system.io.binarywriter?view=netframework-4.7.2).
 *
 * All write operations advance the position by the number of bytes that were written.
 *
 * Any time the word _stream_ or _buffer_ is used in the documentation it refers to the internal array that represents the written data.
 */
export declare class BinaryWriter {
    private _buffer;
    private _length;
    private _position;
    /**
     * Length of the written data in bytes
     */
    get length(): number;
    /**
     * Current position inside the buffer denoting the place at which the next write operation will happen.
     */
    get position(): number;
    /**
     * Changes the position inside the buffer at which the next write operation will happen. Setting it to less than `0` will clamp it to `0`, and setting it
     * to anything more than `length` will clamp it to `length`.
     */
    set position(value: number);
    /**
     * Creates a new `BinaryWriter` with empty writing buffer.
     */
    constructor();
    /**
     * Creates a new `BinaryWriter` and fills its buffer with the specified array. Position is set to the end of the buffer, meaning
     * any subsequent writes will append new data at the end.
     *
     * @remarks
     * There is no syncing between the buffer and the passed array, changes to either won't be reflected in the other.
     *
     * @param {number[]} array
     * @throws [[OutOfBoundsError]] Thrown when any of the array elements provided is outside byte range
     */
    constructor(array: number[]);
    /**
     * Creates a new `BinaryWriter` and fills its buffer with the contents of the array. Position is set to the end of the buffer, meaning
     * any subsequent writes will append new data at the end.
     *
     * @remarks
     * There is no syncing between the buffer and the passed array, changes to either won't be reflected in the other.
     *
     * @param {Uint8Array} array
     */
    constructor(array: Uint8Array);
    /**
     * Writes one byte, `0x01` for `true` and `0x00` for `false` and advances the position by one byte.
     * @param {boolean} value Boolean to write.
     * @link [C# `BinaryWriter.Write(Boolean)` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binarywriter.write?view=netframework-4.7.2#System_IO_BinaryWriter_Write_System_Boolean_)
     */
    writeBoolean(value: boolean): void;
    /**
     * Writes one byte and advances the position by one byte.
     * @param {number} value Byte to write.
     * @throws [[OutOfBoundsError]] Thrown when `value` is less than 0, more than 255, +/- infinity or `NaN`.
     * @link [C# `BinaryWriter.Write(Boolean)` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binarywriter.write?view=netframework-4.7.2#System_IO_BinaryWriter_Write_System_Byte_)
     */
    writeByte(value: number): void;
    /**
     * Writes the same byte multiple times and advances the position by `repeats` bytes.
     * @param {number} value Byte to write.
     * @param {number} repeats Number of times to write the byte.
     * @throws [[InvalidArgumentError]] Thrown when `repeats` is less than 0, +/- infinity or `NaN`.
     * @throws [[OutOfBoundsError]] Thrown when `value` is less than 0, more than 255, +/- infinity or `NaN`.
     */
    writeSameByte(value: number, repeats: number): void;
    /**
     * Writes the passed array of bytes and advances the position by `bytes`'s length.
     * @param {number[]} bytes Bytes to write.
     * @throws [[OutOfBoundsError]] Thrown when any of the bytes in `bytes` is less than 0, more than 255, +/- infinity or `NaN`.
     * @link [C# `BinaryWriter.Write(Boolean)` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binarywriter.write?view=netframework-4.7.2#System_IO_BinaryWriter_Write_System_Byte___)
     */
    writeBytes(bytes: number[]): void;
    /**
     * Writes a `signed byte` and advances the position by one byte.
     * @param {number} value Signed byte to write.
     * @throws [[OutOfBoundsError]] Thrown when `value` is less than -128, more than 127, +/- infinity or `NaN`.
     * @link [C# `BinaryWriter.Write(Boolean)` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binarywriter.write?view=netframework-4.7.2#System_IO_BinaryWriter_Write_System_SByte_)
     */
    writeSignedByte(value: number): void;
    /**
     * Writes a `short` and advances the position by two bytes.
     * @param {number} value Short to write.
     * @throws [[OutOfBoundsError]] Thrown when `value` is less than -32,768 more than 32,767, +/- infinity or `NaN`.
     * @link [C# `BinaryWriter.Write(Boolean)` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binarywriter.write?view=netframework-4.7.2#System_IO_BinaryWriter_Write_System_Int16_)
     */
    writeShort(value: number): void;
    /**
     * Writes an `unsigned short` and advances the position by two bytes.
     * @param {number} value Unsigned short to write.
     * @throws [[OutOfBoundsError]] Thrown when `value` is less than 0 more than 65,535, +/- infinity or `NaN`.
     * @link [C# `BinaryWriter.Write(Boolean)` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binarywriter.write?view=netframework-4.7.2#System_IO_BinaryWriter_Write_System_UInt16_)
     */
    writeUnsignedShort(value: number): void;
    /**
     * Writes an `int` and advances the position by four bytes.
     * @param {number} value Int to write.
     * @throws [[OutOfBoundsError]] Thrown when `value` is less than -2,147,483,648 more than 2,147,483,647, +/- infinity or `NaN`.
     * @link [C# `BinaryWriter.Write(Boolean)` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binarywriter.write?view=netframework-4.7.2#System_IO_BinaryWriter_Write_System_Int32_)
     */
    writeInt(value: number): void;
    /**
     * Writes an `unsigned int` and advances the position by four bytes.
     * @param {number} value Unsigned int to write.
     * @throws [[OutOfBoundsError]] Thrown when `value` is less than 0 more than 4,294,967,295 +/- infinity or `NaN`.
     * @link [C# `BinaryWriter.Write(Boolean)` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binarywriter.write?view=netframework-4.7.2#System_IO_BinaryWriter_Write_System_UInt32_)
     */
    writeUnsignedInt(value: number): void;
    /**
     * Writes a `long` and advances the position by eight bytes.
     *
     * @remarks
     * JavaScript internally uses `double` to represent all numbers. The smallest and largest number that can be represented without loss of precision are,
     * respectively, −9,007,199,254,740,991 `−(2^53 − 1)` and 9,007,199,254,740,991 `2^53 − 1`, while `long` can hold values between `-2^63` and `2^63 - 1`, while
     * `unsigned long` goes all the way up to `2^64-1`.
     *
     * What happens when you go beyond those limits is that some numbers just cannot be expressed. `9007199254740992+1` is the same as `9007199254740992+1+1+1+1`
     * and if you try to set a variable to `9007199254740993` it just gets rounded down.
     *
     * @param {number|string} value Long to write accepted both as a string (for 100% precision in very low/high numbers) and number, when precision is not a
     * requirement.
     * @throws [[InvalidArgumentError]] Thrown when `value` is `NaN` or +/- infinite.
     * @throws [[OutOfBoundsError]] Thrown when `value` is less than -9,223,372,036,854,775,808 more than 9,223,372,036,854,775,807 +/- infinity or `NaN`.
     * @link [C# `BinaryWriter.Write(Boolean)` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binarywriter.write?view=netframework-4.7.2#System_IO_BinaryWriter_Write_System_Int64_)
     */
    writeLong(value: number | string): void;
    /**
     * Writes an `unsigned long` and advances the position by eight bytes. See the remark in [[writeLong]] for details about why strings are preferred.
     *
     * @param {number|string} value Unsigned long to write accepted both as a string (for 100% precision in very low/high numbers) and number, when precision is not a
     * requirement.
     * @throws [[InvalidArgumentError]] Thrown when `value` is `NaN` or +/- infinite.
     * @throws [[OutOfBoundsError]] Thrown when `value` is less than 0 more than 18,446,744,073,709,551,615 +/- infinity or `NaN`.
     * @link [C# `BinaryWriter.Write(Boolean)` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binarywriter.write?view=netframework-4.7.2#System_IO_BinaryWriter_Write_System_UInt64_)
     */
    writeUnsignedLong(value: number | string): void;
    /**
     * Writes a `float` and advances the position by four bytes.
     * @param {boolean} value Float to write.
     * @throws [[OutOfBoundsError]] Thrown when `value` is less than -3.4028235e+38 or more than 3.4028235e+38.
     * @link [C# `BinaryWriter.Write(Boolean)` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binarywriter.write?view=netframework-4.7.2#System_IO_BinaryWriter_Write_System_Single_)
     */
    writeFloat(value: number): void;
    /**
     * Writes a `double` and advances the position by eight bytes.
     * @param {boolean} value Double to write.
     * @link [C# `BinaryWriter.Write(Boolean)` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binarywriter.write?view=netframework-4.7.2#System_IO_BinaryWriter_Write_System_Double_)
     */
    writeDouble(value: number): void;
    /**
     * Writes a single character in the specified encodng and advances the position by the number of bytes the character takes in that encoding.
     *
     * @param {number|String} character Unicode codepoint of the character to write or a string, in which case only the first character is used.
     * @param {Encoding} encoding Character encoding to use when writing the character.
     * @throws [[InvalidArgumentError]] Thrown when `null` is passed for `character` or when the codepoint passed in `character` is negative, +/- infinite or `NaN`
     * @throws [[EncodingError]] Thrown when unknown or unsupported `encoding` is passed.
     * @link [C# `BinaryWriter.Write(Boolean)` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binarywriter.write?view=netframework-4.7.2#System_IO_BinaryWriter_Write_System_Char_)
     */
    writeChar(character: number | string, encoding: Encoding): void;
    /**
     * Writes multiple characters in the specified encodng and advances the position by the number of bytes the charactesr take in that encoding.
     *
     * @param {number[]|String} characters Unicode codepoints of the character to write or a string.
     * @param {Encoding} encoding Character encoding to use when writing the characters.
     * @throws [[InvalidArgumentError]] Thrown when `null` is passed for `character` or when any of the codepoints passed in `characters` is negative, +/- infinite or `NaN`
     * @throws [[EncodingError]] Thrown when unknown or unsupported `encoding` is passed.
     * @link [C# `BinaryWriter.Write(Boolean)` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binarywriter.write?view=netframework-4.7.2#System_IO_BinaryWriter_Write_System_Char___)
     */
    writeChars(characters: number[] | string, encoding: Encoding): void;
    /**
     * Writes length-prefixed multiple characters in the specified encodng and advances the position by the number of bytes the charactesr take in that encoding.
     *
     * @param {number[]|String} value Unicode codepoints of the character to write or a string.
     * @param {Encoding} encoding Character encoding to use when writing the characters.
     * @throws [[InvalidArgumentError]] Thrown when `null` is passed for `character` or when any of the codepoints passed in `characters` is negative, +/- infinite or `NaN`
     * @throws [[EncodingError]] Thrown when unknown or unsupported `encoding` is passed.
     * @link [C# `BinaryWriter.Write(Boolean)` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binarywriter.write?view=netframework-4.7.2#System_IO_BinaryWriter_Write_System_String_)
     */
    writeString(value: number[] | string, encoding: Encoding): void;
    /**
     * Completely clears the underlying buffer and changes `position` and `length` to zero.
     */
    clear(): void;
    /**
     * Returns the contents of the writer as regular array of bytes.
     * @returns {number[]}
     */
    toArray(): number[];
    /**
     * Returns the contents of the writer as `Uint8Array`
     * @returns {Uint8Array}
     */
    toUint8Array(): Uint8Array;
}
