/** @ignore*/
export declare const EncodingMessageFactory: {
    unknownEncoding: (encoding: string) => string;
};
/** @ignore*/
export declare const InvalidUtf8CharacterMessageFactory: {
    invalidLeadingByte: (readByte: number, position: number) => string;
    notContinuationByte: (sequenceStartPosition: number, byteIndex: number, readByte: number) => string;
};
/** @ignore*/
export declare const EndOfStreamMessageFactory: {
    readStringZeroBytesLeft: () => string;
    readStringLengthNotEnoughBytesLeft: () => string;
    readStringTooLongPrefix: () => string;
    readStringTooLongLeft: (expectedLength: number, remainingLength: number) => string;
    readCharZeroBytesLeft: () => string;
    utf8NotEnoughBytesInBuffer: (position: number, bytesExpected: number, bytesRemaining: number) => string;
    utf8NotEnoughBytesAllowed: (position: number, bytesExpected: number, bytesRemaining: number) => string;
    notEnoughBytesInBuffer: (bytesExpected: number, bytesRemaining: number, operationName: string) => string;
};
/** @ignore */
export declare const OutOfBoundsMessageFactory: {
    numberOutsideRange: (numberName: string, minimumValue: string | number, maximumValue: string | number, givenValue: string | number) => string;
};
