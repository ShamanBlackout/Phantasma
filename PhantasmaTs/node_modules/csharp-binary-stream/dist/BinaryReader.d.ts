import { Encoding } from "./Encoding";
/**
 * A binary stream reader compatible with majority of methods in C#'s [BinaryReader](https://docs.microsoft.com/en-us/dotnet/api/system.io.binaryreader?view=netframework-4.7.2).
 *
 * Any time the word _stream_ is used in the documentation it refers to the `ArrayBuffer` provided in the constructor of this class.
 */
export declare class BinaryReader {
    private _stream;
    private _view;
    private _position;
    private _bufferStart;
    private _bufferLength;
    /**
     * Length of the stream, in bytes loaded, into the reader.
     */
    get length(): number;
    /**
     * Return the current position in the stream from which the read operations happen.
     */
    get position(): number;
    /**
     * Changes the current position in the stream from which the read operations happen.
     * Trying to set it to value smaller than `0` will set it to `0` instead (the beginning of the stream).
     * Trying to set it to value larger than `length` will set it to `length` instead (the end of the stream).
     */
    set position(value: number);
    /**
     * Returns true if the `position` of the stream is past the final byte (equal to `length`).
     */
    get isEndOfStream(): boolean;
    private get internalPosition();
    /**
     * @ignore
     */
    private get remainingBytes();
    /**
     * Creates a new reader powered by an ArrayBuffer.
     *
     * @remark
     * There is a danger when accessing a `TypedArray`'s [`buffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer) property, because the `TypeArray` is just a view into the `ArrayBuffer` that can have different offset and length.
     *
     * For example, imagine a buffer `00 01 02 03 04 05`. `const arr = new Uint8Array(buffer, 1, 2)` will only have access to `01 02`, but it is still powered by the same,
     * 6-byte buffer, and doing `new BinaryReader(arr.buffer)` will also refer to the longer buffer.
     *
     * There are three solutions:
     *
     *  1. If you have access to `Uint8Array`, simply use that.
     *  2. Create a new `Uint8Array` from a differently typed array: `new Uint8Array(other.buffer, other.byteOffset, other.byteLength);`
     *  3. Create a new `ArrayBuffer` using slice: `arr.buffer.slice(arr.byteOffset, arr.byteOffset + arr.byteLength);`
     *
     * @param {ArrayBuffer|Uint8Array} stream Stream from which to read the data.
     */
    constructor(stream: ArrayBuffer | Uint8Array);
    /**
     * Reads a `boolean` from the stream and advances the stream by one byte.
     *
     * @returns {boolean} `false` if it's zero and `true` if it is not zero.
     * @throws [[EndOfStreamError]] Thrown when there are no bytes left in the stream.
     * @link [C# `BinaryReader.ReadBoolean` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binaryreader.readboolean?view=netframework-4.7.2)
     */
    readBoolean(): boolean;
    /**
     * Reads a `byte` (unsigned 8-bit number)  from the stream and advances the stream by one byte.
     *
     * @returns {number} Number between 0 and 255.
     * @throws [[EndOfStreamError]] Thrown when there are no bytes left in the stream.
     * @link [C# `BinaryReader.ReadByte` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binaryreader.readbyte?view=netframework-4.7.2)
     */
    readByte(): number;
    /**
     * Reads a specified number of  `byte`s (unsigned 8-bit number)  from the stream and advances the stream by the requested number of bytes.
     *
     * @param {number} bytesToRead The number of bytes to read from the stream. must be an integer larger or equal than zero.
     * @returns {number[]} Array of bytes (numbers between 0 and 255) read from the stream. If `bytesToRead` is `0` it returns an empty array.
     * @throws [[InvalidArgumentError]] when `bytesToRead` is less than zero.
     * @throws [[EndOfStreamError]] Thrown when there are no bytes left in the stream.
     * @link [C# `BinaryReader.ReadBytes` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binaryreader.readbytes?view=netframework-4.7.2)
     */
    readBytes(bytesToRead: number): number[];
    /**
     * Reads a `signed byte` (signed 8-bit number)  from the stream and advances the stream by one byte.
     *
     * @returns {number} Number between -128 and 127.
     * @throws [[EndOfStreamError]] Thrown when there are no bytes left in the stream.
     * @link [C# `BinaryReader.ReadSByte` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binaryreader.readsbyte?view=netframework-4.7.2)
     */
    readSignedByte(): number;
    /**
     * Reads a `short` (signed 16-bit number) from the stream and advances the stream by two bytes.
     *
     * @returns {number} Number between -65,536 and 32,767.
     * @throws [[EndOfStreamError]] Thrown when there are not enough bytes left in the stream. Position of the stream does not change if this exception is thrown.
     * @link [C# `BinaryReader.ReadInt16` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binaryreader.readint16?view=netframework-4.7.2)
     */
    readShort(): number;
    /**
     * Reads an `unsigned short` (unsigned 16-bit number) from the stream and advances the stream by two bytes.
     *
     * @returns {number} Number between 0 and 65,535.
     * @throws [[EndOfStreamError]] Thrown when there are not enough bytes left in the stream. Position of the stream does not change if this exception is thrown.
     * @link [C# `BinaryReader.ReadUInt16` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binaryreader.readuint16?view=netframework-4.7.2)
     */
    readUnsignedShort(): number;
    /**
     * Reads an `int` (signed 32-bit number) from the stream and advances the stream by four bytes.
     *
     * @returns {number} Number between -2,147,483,648 and 2,147,483,647.
     * @throws [[EndOfStreamError]] Thrown when there are not enough bytes left in the stream. Position of the stream does not change if this exception is thrown.
     * @link [C# `BinaryReader.ReadInt32` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binaryreader.readint32?view=netframework-4.7.2)
     */
    readInt(): number;
    /**
     * Reads an `unsigned int` (unsigned 32-bit number) from the stream and advances the stream by four bytes.
     *
     * @returns {number} Number between 0 and 4,294,967,296.
     * @throws [[EndOfStreamError]] Thrown when there are not enough bytes left in the stream. Position of the stream does not change if this exception is thrown.
     * @link [C# `BinaryReader.ReadUInt32` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binaryreader.readuint32?view=netframework-4.7.2)
     */
    readUnsignedInt(): number;
    /**
     * Reads a `long` (signed 64-bit number) from the stream as a string and advances the stream by eight bytes. The number is returned as string to return
     * any precision loss caused by the value being stored in `double` internalle (check the *remarks* for more details).
     *
     * @remarks
     * JavaScript internally uses `double` to represent all numbers. The smallest and largest number that can be represented without loss of precision are,
     * respectively, −9,007,199,254,740,991 `−(2^53 − 1)` and 9,007,199,254,740,991 `2^53 − 1`, while `long` can hold values between `-2^63` and `2^63 - 1`, while
     * `unsigned long` goes all the way up to `2^64-1`.
     *
     * What happens when you go beyond those limits is that some numbers just cannot be expressed. `9007199254740992+1` is the same as `9007199254740992+1+1+1+1`
     * and if you try to set a variable to `9007199254740993` it just gets rounded down.
     *
     * @returns {string} String representing a number between -9,223,372,036,854,775,808 and 9,223,372,036,854,775,807
     * @throws [[EndOfStreamError]] Thrown when there are not enough bytes left in the stream. Position of the stream does not change if this exception is thrown.
     * @link [C# `BinaryReader.ReadInt64` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binaryreader.readint64?view=netframework-4.7.2)
     */
    readLongString(): string;
    /**
     * Reads a `long` (signed 64-bit number) from the stream and advances the stream by eight bytes. If the number is too big or too small precision errors
     * may occur, refer to the remark in [[readLongString]] for more details.
     *
     * @returns {number} Number between -9,223,372,036,854,775,808 and 9,223,372,036,854,775,807
     * @throws [[EndOfStreamError]] Thrown when there are not enough bytes left in the stream. Position of the stream does not change if this exception is thrown.
     * @link [C# `BinaryReader.ReadInt64` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binaryreader.readint64?view=netframework-4.7.2)
     */
    readLong(): number;
    /**
     * Reads an `unsigned long` (unsigned 64-bit number) from the stream as a string and advances the stream by eight bytes. The number is returned as string to return
     * any precision loss caused by the value being stored in `double` internalle, refer to the remark in [[readLongString]] for more details.
     *
     * @returns {string} String representing a number between 0 and 18,446,744,073,709,551,615.
     * @throws [[EndOfStreamError]] Thrown when there are not enough bytes left in the stream. Position of the stream does not change if this exception is thrown.
     * @link [C# `BinaryReader.ReadUInt64` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binaryreader.readuint64?view=netframework-4.7.2)
     */
    readUnsignedLongString(): string;
    /**
     * Reads an `unsigned long` (unsigned 64-bit number) from the stream and advances the stream by eight bytes. If the number is too big precision errors may occur, refer to the remark in
     * [[readLongString]] for more details.
     *
     * @returns {number} Number between 0 and 18,446,744,073,709,551,615.
     * @throws [[EndOfStreamError]] Thrown when there are not enough bytes left in the stream. Position of the stream does not change if this exception is thrown.
     * @link [C# `BinaryReader.ReadUInt64` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binaryreader.readuint64?view=netframework-4.7.2)
     */
    readUnsignedLong(): number;
    /**
     * Reads a `float` (single-precision floating-point number) from the stream and advances the stream by four bytes.
     *
     * @returns {number} Float number
     * @throws [[EndOfStreamError]] Thrown when there are not enough bytes left in the stream. Position of the stream does not change if this exception is thrown.
     * @link [C# `BinaryReader.ReadSingle` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binaryreader.readsingle?view=netframework-4.7.2)
     */
    readFloat(): number;
    /**
     * Reads a `double` (double-precision floating-point number) from the stream and advances the stream by eight bytes.
     *
     * @returns {number} Double number
     * @throws [[EndOfStreamError]] Thrown when there are not enough bytes left in the stream. Position of the stream does not change if this exception is thrown.
     * @link [C# `BinaryReader.ReadDouble` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binaryreader.readdouble?view=netframework-4.7.2)
     */
    readDouble(): number;
    /**
     * Reads a single character from the string, the number of bytes read dependant on the encoding used.
     *
     * @param {Encoding} encoding The encoding to use when reading the chars.
     * @returns {string} A single character read from the stream
     * @throws [[EncodingError]] Thrown when an unknown encoding is provided as the argument.
     * @throws [[EndOfStreamError]] Thrown when there are not enough bytes left in the stream. Position of the stream does not change if this exception is thrown.
     * @throws [[InvalidUtf8CharacterError]] Thrown when using UTF-8 encoding when an incorrect UTF-8 character sequence is encountered.
     * @link [C# `BinaryReader.ReadDouble` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binaryreader.readdouble?view=netframework-4.7.2)
     */
    readChar(encoding: Encoding): string;
    /**
     * Reads multiple characters from the string, the number of bytes read dependant on the encoding used.
     *
     * @param {number} charactersToRead The number of characters to read from the stream. If the number is fractional it is rounded down. Has to be at least 1.
     * @param {Encoding} encoding The encoding to use when reading the chars.
     * @returns {string} A string read from the stream.
     * @throws [[InvalidArgumentError]] Thrown when `charactersToRead` is not a number nor numeric string or when it is less than 1.
     * @throws [[EncodingError]] Thrown when an unknown encoding is provided as the argument.
     * @throws [[EndOfStreamError]] Thrown when there are not enough bytes left in the stream. Position of the stream does not change if this exception is thrown.
     * @throws [[InvalidUtf8CharacterError]] Thrown when using UTF-8 encoding when an incorrect UTF-8 character sequence is encountered.
     * @link [C# `BinaryReader.ReadChars` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binaryreader.readchars?view=netframework-4.7.2)
     */
    readChars(charactersToRead: number, encoding: Encoding): string;
    /**
     * Reads the specified number of bytes in the provided encoding and advances the stream by that number.
     *
     * @param {number} bytesToRead The number of bytes to read from the stream. If the number is fractional it is rounded down. Has to be at least 1.
     * @param {Encoding} encoding The encoding to use when reading the chars.
     * @returns {string} A string read from the stream.
     * @throws [[InvalidArgumentError]] Thrown when `bytesToRead` is not a number nor numeric string or when it is less than 1.
     * @throws [[EncodingError]] Thrown when an unknown encoding is provided as the argument.
     * @throws [[EndOfStreamError]] Thrown when there are not enough bytes left in the stream or when the function stops reading in the middle of a
     * character sequence in multibyte character encodings. Position of the stream does not change if this exception is thrown.
     * @throws [[InvalidUtf8CharacterError]] Thrown when using UTF-8 encoding when an incorrect UTF-8 character sequence is encountered.
     */
    readCharBytes(bytesToRead: number, encoding: Encoding): string;
    /**
     * Reads a string from the stream that is prefixed with its length, encoded as an integer seven bits at a time.
     *
     * @param {Encoding} encoding The encoding to use when reading the string.
     * @returns {string} A string read from the stream.
     * @throws [[InvalidArgumentError]] Thrown when `charactersToRead` is not a number nor numeric string or when it is less than 1.
     * @throws [[EncodingError]] Thrown when an unknown encoding is provided as the argument.
     * @throws [[EndOfStreamError]] Thrown when there are not enough bytes left in the stream or when the lenfth prefix is longer than 5 bytes.
     * @throws [[InvalidUtf8CharacterError]] Thrown when using UTF-8 encoding when an incorrect UTF-8 character sequence is encountered.
     * @link [C# `BinaryReader.ReadString` documentation](https://docs.microsoft.com/en-us/dotnet/api/system.io.binaryreader.readstring?view=netframework-4.7.2)
     */
    readString(encoding: Encoding): string;
    private assertRemainingBytes;
}
