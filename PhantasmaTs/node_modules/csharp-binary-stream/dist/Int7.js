"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.read7BitEncodedInt = void 0;
const EndOfStreamError_1 = require("./errors/EndOfStreamError");
const ErrorMessageFactory_1 = require("./errors/ErrorMessageFactory");
/** @ignore */
function read7BitEncodedInt(position, buffer) {
    // Read out an Int32 7 bits at a time.  The high bit
    // of the byte when on means to continue reading more bytes.
    let count = 0;
    let shift = 0;
    let b;
    do {
        // Check for a corrupted stream.  Read a max of 5 bytes.
        // In a future version, add a DataFormatException.
        if (shift === 5 * 7) // 5 bytes max per Int32, shift += 7
         {
            throw new EndOfStreamError_1.EndOfStreamError(ErrorMessageFactory_1.EndOfStreamMessageFactory.readStringTooLongPrefix());
        }
        if (position >= buffer.byteLength) {
            throw new EndOfStreamError_1.EndOfStreamError(ErrorMessageFactory_1.EndOfStreamMessageFactory.readStringLengthNotEnoughBytesLeft());
        }
        b = buffer[position++];
        count |= (b & 0x7F) << shift;
        shift += 7;
    } while ((b & 0x80) != 0);
    return [count, position];
}
exports.read7BitEncodedInt = read7BitEncodedInt;
//# sourceMappingURL=Int7.js.map