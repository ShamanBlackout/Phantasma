/**********************************************************
Creator: Shaman Blackout

Purpose: A smart contract that is used for testing purposes
only. Test out different functionality of TOMB in an effort
to understand how everything works.

**********************************************************/
contract provingground{
 
    import Runtime;
    import Oracle;
    import Mail;
    import Number;
    import String;
    import Array;   
    import Hash; 
    global _owner: address;

    constructor(owner:address){
        _owner = owner;
    }

    public testHash(test_hash: string): string{
        local tx_hash = #DBEBEA827CBA60657F141FD6F94B929D85A95EFC9340ADCFFE0FD73A3CF2845C;
        return tx_hash.toString();
    }
    public testHash2():hash {
        local tx_hash = #0xDBEBEA827CBA60657F141FD6F94B929D85A95EFC9340ADCFFE0FD73A3CF2845C;

        return tx_hash;
    }

    /************************************************************************************************
    Not sure how to use Oracles yet. Plan was to use Oracles to check price of given token
    and return that token.
    ************************************************************************************************/
    public checkPrice(symbol: string):number{
        local price: number = Oracle.price(symbol);
        return price;
    }

    public sendMsg(from:address, target:address, archiveHash:hash){
        local tx_hash = "DBEBEA827CBA60657F141FD6F94B929D85A95EFC9340ADCFFE0FD73A3CF2845C";
        //archiveHash = Hash.FromString(tx_hash);
        Mail.pushMessage(from, target,archiveHash);
    }

    //deprecated since Hash has issues
    public testAllTypes(str:string, truthy:bool,num:number,stamp:timestamp,bytArr:bytes,addy:address,hashish: hash): string{

        local type_str ="Type of str: " +$TYPE_OF(str) + " Type of truthy: " +$TYPE_OF(truthy) +" Type of stamp: " +$TYPE_OF(stamp) +" Type of bytArr: " +$TYPE_OF(bytArr) + " Type of addy: " +$TYPE_OF(addy) +" Type of num: " +$TYPE_OF(num);
        return type_str;
    }

    public testAllTypes2(str:string, truthy:bool,num:number,stamp:timestamp,bytArr:bytes,addy:address): string{

        local type_str ="Type of str: " +$TYPE_OF(str) + " Type of truthy: " +$TYPE_OF(truthy) +" Type of stamp: " +$TYPE_OF(stamp) +" Type of bytArr: " +$TYPE_OF(bytArr) + " Type of addy: " +$TYPE_OF(addy) +" Type of num: " +$TYPE_OF(num);
        return type_str;
    }
   
   /*****************************************************
    Not yet finished
   ******************************************************/
    public decimalTest(digits:number){
        //local val: decimal<digits>; appears that it is no possible to dynamically assign a decimal digit

    }
    /********************************************
    Log messages are shown under vm.txt within 
    docker
    *********************************************/
    public logTest(){
        Runtime.log("Testing");
    }


    public register(from:address,domainName: string)
    {   
        Runtime.expect(Runtime.isWitness(from),"Invalid Witness");
        Mail.registerDomain(from,domainName);

    }

    public testBool(bRole:bool):type{
    

        return $TYPE_OF(bRole);
        
    }
    
    public convStrToBtyes(str:string):bytes{
        conv
        return String.toBytes(str);
    }

    public testNumToBoolConversion(num:number):bool{
        local convNumToBool: bool = Number.toBool(num);
        //local convNumToBool: bool = true;
        return convNumToBool;
    }



    public domainExist(domainName:string): bool{

        return Mail.domainExists(domainName);
    }

    public quotePrice(baseSymbol:string, quoteSymbol:string, amount:number): number {
        local qu: number = Oracle.quote(baseSymbol,quoteSymbol,amount);
       return qu;
    }

    trigger onUpgrade(from:address)
    {
        Runtime.expect(Runtime.isWitness(_owner), "Only the owner can update");
        return;
    }
    
    trigger onKill(from:address){
        Runtime.expect(Runtime.isWitness(_owner), "Only the owner can delete");
        return;
    }

}